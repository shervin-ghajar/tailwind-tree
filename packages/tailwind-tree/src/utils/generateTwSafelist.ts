import chalk from "chalk";
import fs from "fs";
import path from "path";
import { twTree } from "./twTree";
import JSON5 from "json5";

const consumerSafelistPath = path.resolve(process.cwd(), "tw-safelist.js"); // <-- output in consumer root

// Collect all source files recursively
const getAllSourceFiles = (dir: string): string[] => {
  let results: string[] = [];
  const entries = (fs.readdirSync(dir) || []).filter((d) => !["node_modules", "dist", ".git"].includes(d));

  for (const file of entries) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      results = results.concat(getAllSourceFiles(fullPath));
    } else if (/\.(ts|tsx|js|jsx)$/.test(file)) {
      results.push(fullPath);
    }
  }

  return results;
};

// Extract twTree classes from all files
const collectUsedClasses = (sourceFiles: string[]): Set<string> => {
  const usedClasses = new Set<string>();
  const twTreeRegex = /twTree\s*\(\s*(\[(?:[\s\S]*?)\])\s*\)/g;

  for (const filePath of sourceFiles) {
    const content = fs.readFileSync(filePath, "utf8");
    let match;

    while ((match = twTreeRegex.exec(content)) !== null) {
      try {
        const raw = match[1];
        if (typeof raw === "string" && raw.trim().length > 0) {
          const parsed = JSON5.parse(raw);
          const flattened = twTree(parsed).split(" ");
          flattened.forEach((cls) => cls && usedClasses.add(cls.trim()));
        }
      } catch (err) {
        console.warn(chalk.yellow(`⚠️  Failed to parse twTree in file: ${filePath}`));
        console.warn(chalk.gray(match[0]));
        console.warn(err);
      }
    }
  }

  return usedClasses;
};

// Write the safelist as a valid JS module
const writeSafelistToFile = (filePath: string, classes: string[]): void => {
  const contents =
    `// Auto-generated by tailwind-tree\n` + `// Do not manually edit this file.\n\n` + `module.exports = ${JSON.stringify(classes.sort(), null, 2)};\n`;

  fs.writeFileSync(filePath, contents, "utf8");
  console.log(chalk.greenBright(`✅ Generated safelist with ${classes.length} classes → ${filePath}`));
};

// Main generation function
export const generateTwSafelist = async () => {
  try {
    const files = getAllSourceFiles(process.cwd());
    const classes = collectUsedClasses(files);
    writeSafelistToFile(consumerSafelistPath, [...classes]);
  } catch (error) {
    console.error("❌ Error generating tw-safelist:", error);
    process.exit(1);
  }
};
