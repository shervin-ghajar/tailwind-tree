/* eslint-disable @typescript-eslint/no-unused-vars */
import { parse } from '@typescript-eslint/typescript-estree';
import chalk from 'chalk';
import fs from 'fs';
import path from 'path';

import { extractClassesFromNode } from './extractClassesFromNode';
import { traverse } from './traverse';

const consumerSafelistPath = path.resolve(process.cwd(), 'tw-safelist.js'); // output in consumer root

// Collect all source files recursively
const getAllSourceFiles = (dir: string): string[] => {
  let results: string[] = [];

  const excludeFiles = ['node_modules', 'dist', '.git', 'tw-safelist.js'];

  const entries = fs.readdirSync(dir);

  for (const file of entries) {
    if (excludeFiles.includes(file)) continue;

    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      results = results.concat(getAllSourceFiles(fullPath));
    } else if (/\.(ts|tsx|js|jsx)$/.test(file)) {
      results.push(fullPath);
    }
  }

  return results;
};

// Extract twTree classes from all files
export const collectUsedClasses = (sourceFiles: string[]): Set<string> => {
  const usedClasses = new Set<string>();

  for (const filePath of sourceFiles) {
    let content: string;
    try {
      content = fs.readFileSync(filePath, 'utf8');
    } catch (err) {
      console.warn(chalk.yellow(`⚠️  Failed to read file: ${filePath}`));
      continue;
    }

    let ast;
    try {
      ast = parse(content, {
        range: false,
        jsx: true,
      });
    } catch (err) {
      console.warn(chalk.yellow(`⚠️  Failed to parse AST for file: ${filePath}`));
      continue;
    }
    traverse(ast, (node) => {
      if (
        node.type === 'CallExpression' &&
        node.callee.type === 'Identifier' &&
        node.callee.name === 'twTree' &&
        node.arguments.length > 0
      ) {
        const arg = node.arguments[0];
        const classes = extractClassesFromNode(arg);
        classes.forEach((cls) => {
          if (cls) usedClasses.add(cls.trim());
        });
      }
    });
  }

  return usedClasses;
};

// Write the safelist as a valid JS module
const writeSafelistToFile = (filePath: string, classes: string[]): void => {
  const contents =
    `// Auto-generated by tailwind-tree\n` +
    `// Do not manually edit this file.\n\n` +
    `module.exports = ${JSON.stringify(classes.sort(), null, 2)};\n`;

  const prev = fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8') : '';

  if (prev === contents) {
    // Nothing changed — don't rewrite or trigger watchers
    return;
  }
  fs.writeFileSync(filePath, contents, 'utf8');
  console.log(
    chalk.greenBright(`✅ Generated safelist with ${classes.length} classes → ${filePath}`),
  );
};

// Main generation function
export const generateTwSafelist = async () => {
  try {
    const files = getAllSourceFiles(process.cwd());
    const classes = collectUsedClasses(files);
    writeSafelistToFile(consumerSafelistPath, [...classes]);
  } catch (error) {
    console.error('❌ Error generating tw-safelist:', error);
    process.exit(1);
  }
};
